generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  hashedPassword String?
  locationName  String?
  locationLat   Float?
  locationLon   Float?
  climateZoneId String?
  role          Role    @default(USER)
  climateZone   ClimateZone? @relation(fields: [climateZoneId], references: [id])
  gardens       Garden[]
  reminders     Reminder[]
  focusItems    FocusItem[]
  notificationRules NotificationRule[]
  notifications Notification[]
  notificationPreference NotificationPreference?
  measurementPreference MeasurementPreference?
  accounts      Account[]
  sessions      Session[]
  collections   PlantCollection[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum TemperatureUnit {
  CELSIUS
  FAHRENHEIT
}

enum WindSpeedUnit {
  KPH
  MPH
  MPS
  KNOTS
}

enum PressureUnit {
  HPA
  INHG
  KPA
  MMHG
}

enum PrecipitationUnit {
  MILLIMETERS
  INCHES
}

enum LengthUnit {
  CENTIMETERS
  METERS
  INCHES
  FEET
}

model ClimateZone {
  id          String   @id
  name        String
  country     String
  frostFirst  DateTime?
  frostLast   DateTime?
  notes       String?
  plants      ClimatePlantWindow[]
  users       User[]
}

model Plant {
  id                      String   @id @default(cuid())
  perenualId              Int?     @unique
  commonName              String
  scientificName          String?
  otherNames              String[]
  family                  String?
  origin                  String?
  plantType               String?
  category                String
  cycle                   String?
  sunRequirement          String
  sunlightExposure        String[]
  soilNotes               String?
  soilPreferences         String[]
  waterGeneral            String
  watering                String?
  wateringGeneralBenchmark Json?
  plantAnatomy            Json?
  pruningMonth            String[]
  pruningCount            Json?
  seeds                   Int?
  attracts                String[]
  propagationMethods      String[]
  hardinessMin            String?
  hardinessMax            String?
  hardinessLocation       Json?
  flowers                 Boolean?
  floweringSeason         String?
  cones                   Boolean?
  fruits                  Boolean?
  edibleFruit             Boolean?
  fruitingSeason          String?
  harvestSeason           String?
  harvestMethod           String?
  leaf                    Boolean?
  edibleLeaf              Boolean?
  daysToMaturity          Int?
  growthRate              String?
  maintenanceLevel        String?
  medicinal               Boolean?
  poisonousToHumans       Boolean?
  poisonousToPets         Boolean?
  droughtTolerant         Boolean?
  saltTolerant            Boolean?
  thorny                  Boolean?
  invasive                Boolean?
  rare                    Boolean?
  tropical                Boolean?
  cuisine                 Boolean?
  indoor                  Boolean?
  careLevel               String?
  careNotes               String?
  description             String?
  defaultImage            Json?
  otherImages             Json?
  imageLocalPath          String?
  wateringQuality         String[]
  wateringPeriod          String[]
  wateringAvgVolume       Json?
  wateringDepth           Json?
  wateringBasedTemperature Json?
  wateringPhLevel         Json?
  sunlightDuration        Json?
  sowDepthMm              Int?
  spacingInRowCm          Int?
  spacingBetweenRowsCm    Int?
  relationships           Companion[] @relation("CompanionSource")
  relatedRelationships    Companion[] @relation("CompanionTarget")
  climateWindows          ClimatePlantWindow[]
  plantings               Planting[]
  collections             CollectionPlant[]
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model ClimatePlantWindow {
  id            String  @id @default(cuid())
  plantId       String
  climateZoneId String
  sowIndoors    Json?
  sowOutdoors   Json?
  transplant    Json?
  notes         String?
  plant         Plant       @relation(fields: [plantId], references: [id])
  climateZone   ClimateZone @relation(fields: [climateZoneId], references: [id])

  @@unique([plantId, climateZoneId])
}

model Companion {
  id            String  @id @default(cuid())
  plantId       String
  targetPlantId String?
  targetName    String
  type          String
  reason        String?
  plant         Plant   @relation("CompanionSource", fields: [plantId], references: [id])
  targetPlant   Plant?  @relation("CompanionTarget", fields: [targetPlantId], references: [id])
}

model Garden {
  id        String   @id @default(cuid())
  userId    String
  name      String
  widthCm   Int
  lengthCm  Int
  heightCm  Int?
  beds      Bed[]
  user      User     @relation(fields: [userId], references: [id])
}

model Bed {
  id        String  @id @default(cuid())
  gardenId  String
  name      String
  widthCm   Int
  lengthCm  Int
  heightCm  Int?
  plantings Planting[]
  garden    Garden @relation(fields: [gardenId], references: [id])
}

model Planting {
  id         String  @id @default(cuid())
  bedId      String
  plantId    String
  startDate  DateTime
  quantity   Int?
  notes      String?
  positionX  Float?
  positionY  Float?
  spanWidth  Float?
  spanHeight Float?
  bed        Bed    @relation(fields: [bedId], references: [id])
  plant      Plant  @relation(fields: [plantId], references: [id])
  reminders  Reminder[]
}

model FocusItem {
  id       String    @id @default(cuid())
  userId   String
  kind     FocusKind
  targetId String
  label    String?
  createdAt DateTime @default(now())
  user     User      @relation(fields: [userId], references: [id])

  @@index([userId, kind, targetId], name: "focus_user_target")
}

model NotificationRule {
  id           String               @id @default(cuid())
  userId       String
  name         String
  type         NotificationRuleType
  schedule     String?
  params       Json
  isEnabled    Boolean              @default(true)
  throttleSecs Int                  @default(21600)
  createdAt    DateTime             @default(now())
  user         User                 @relation(fields: [userId], references: [id])
  notifications Notification[]
}

model Notification {
  id        String              @id @default(cuid())
  userId    String
  ruleId    String?
  title     String
  body      String
  severity  NotificationSeverity
  channel   NotificationChannel
  dueAt     DateTime
  sentAt    DateTime?
  meta      Json?
  user      User                @relation(fields: [userId], references: [id])
  rule      NotificationRule?   @relation(fields: [ruleId], references: [id])
}

model NotificationPreference {
  id                  String   @id @default(cuid())
  userId              String   @unique
  emailEnabled        Boolean  @default(true)
  pushEnabled         Boolean  @default(true)
  inAppEnabled        Boolean  @default(true)
  emailDigestHour     Int      @default(7)
  emailDigestTimezone String?
  dndEnabled          Boolean  @default(false)
  dndStartHour        Int?
  dndEndHour          Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MeasurementPreference {
  id                 String              @id @default(cuid())
  userId             String              @unique
  temperatureUnit    TemperatureUnit     @default(CELSIUS)
  windSpeedUnit      WindSpeedUnit       @default(KPH)
  pressureUnit       PressureUnit        @default(HPA)
  precipitationUnit  PrecipitationUnit   @default(MILLIMETERS)
  lengthUnit         LengthUnit          @default(CENTIMETERS)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PlantCollection {
  id        String   @id @default(cuid())
  userId    String
  name      String
  notes     String?
  plants    CollectionPlant[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CollectionPlant {
  id            String          @id @default(cuid())
  collectionId  String
  plantId       String
  notes         String?
  addedAt       DateTime        @default(now())
  collection    PlantCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  plant         Plant           @relation(fields: [plantId], references: [id])

  @@unique([collectionId, plantId])
}

model Reminder {
  id         String   @id @default(cuid())
  userId     String
  plantingId String?
  title      String
  dueAt      DateTime
  cadence    String?
  type       String
  sentAt     DateTime?
  details    String?
  user       User     @relation(fields: [userId], references: [id])
  planting   Planting? @relation(fields: [plantingId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int? @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum FocusKind {
  planting
  bed
  plant
  task
}

enum NotificationRuleType {
  time
  weather
  soil
  phenology
  garden
}

enum NotificationSeverity {
  info
  warning
  critical
}

enum NotificationChannel {
  push
  email
  inapp
}
